name: Build Application with Briefcase

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: macOS
            output_name: "Apple Music History Converter-macOS"
            build_path: "build/apple-music-history-converter/macos/app/"
          - os: windows-latest
            platform: windows
            output_name: "Apple Music History Converter-Windows"
            build_path: "build/apple-music-history-converter/windows/app/"
          - os: ubuntu-latest
            platform: linux
            output_name: "Apple Music History Converter-Linux"
            build_path: "build/apple-music-history-converter/linux/app/"

    steps:
    # Initial Setup
    - uses: actions/checkout@v4
      with:
        clean: true

    # Build Environment Setup
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # Linux specific dependencies (must be BEFORE Python dependencies)
    - name: Install Linux system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgirepository-2.0-dev \
          libgirepository1.0-dev \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf-2.0-dev \
          libffi-dev \
          shared-mime-info \
          gobject-introspection \
          libgtk-3-dev

    # Dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install briefcase

    # macOS specific setup for code signing
    - name: Import Code Signing Certificate (macOS)
      if: runner.os == 'macOS'
      uses: apple-actions/import-codesign-certs@v3
      with:
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      continue-on-error: true  # Don't fail if certificates aren't available

    # Build with Briefcase
    - name: Create Briefcase app
      run: |
        briefcase create ${{ matrix.platform }}

    - name: Build Briefcase app
      run: |
        briefcase build ${{ matrix.platform }}

    # macOS: Store notarization credentials and package with signing
    - name: Store notarization credentials (macOS)
      if: runner.os == 'macOS'
      run: |
        xcrun notarytool store-credentials "briefcase-macOS-${{ secrets.APPLE_TEAM_ID }}" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}"
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      continue-on-error: true

    - name: Package macOS app (DMG with signing & notarization)
      if: runner.os == 'macOS'
      run: |
        briefcase package macOS \
          --identity "Developer ID Application: Ashraf Ali (7HQVB2S4BX)" \
          --no-input

    # Windows: Package as app (Briefcase creates installer)
    - name: Package Windows app
      if: runner.os == 'Windows'
      run: |
        briefcase package windows --adhoc-sign --no-input

    # Linux: Build both AppImage and system package
    - name: Package Linux AppImage
      if: runner.os == 'Linux'
      run: |
        briefcase package linux appimage --no-input

    - name: Package Linux system package (tar.gz)
      if: runner.os == 'Linux'
      run: |
        briefcase package linux system --no-input

    # Find and rename built artifacts
    - name: Find macOS DMG
      if: runner.os == 'macOS'
      run: |
        # Briefcase creates DMG in dist/ folder
        find dist -name "*.dmg" -exec mv {} "Apple_Music_History_Converter_macOS.dmg" \;
        ls -lh Apple_Music_History_Converter_macOS.dmg

    - name: Find Windows installer
      if: runner.os == 'Windows'
      run: |
        # Find MSI or EXE in dist folder
        Get-ChildItem -Path dist -Filter *.msi | ForEach-Object { Move-Item $_.FullName "Apple_Music_History_Converter_Windows.msi" }
        if (Test-Path "Apple_Music_History_Converter_Windows.msi") {
          Get-Item "Apple_Music_History_Converter_Windows.msi"
        } else {
          Get-ChildItem -Path dist -Filter *.exe | Select-Object -First 1 | ForEach-Object { Move-Item $_.FullName "Apple_Music_History_Converter_Windows.exe" }
          Get-Item "Apple_Music_History_Converter_Windows.exe"
        }
      shell: pwsh

    - name: Find Linux packages
      if: runner.os == 'Linux'
      run: |
        # Find AppImage
        find dist -name "*.AppImage" -exec mv {} "Apple_Music_History_Converter_Linux.AppImage" \;
        chmod +x Apple_Music_History_Converter_Linux.AppImage
        # Find system package (deb, rpm, or tar.gz)
        find dist -name "*.deb" -exec mv {} "Apple_Music_History_Converter_Linux.deb" \; || \
        find dist -name "*.rpm" -exec mv {} "Apple_Music_History_Converter_Linux.rpm" \; || \
        find dist -name "*.tar.gz" -exec mv {} "Apple_Music_History_Converter_Linux.tar.gz" \;
        ls -lh Apple_Music_History_Converter_Linux.*

    # Artifact Upload
    - name: Upload macOS artifact
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: Apple_Music_History_Converter_macOS.dmg
        if-no-files-found: error

    - name: Upload Windows artifact
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          Apple_Music_History_Converter_Windows.msi
          Apple_Music_History_Converter_Windows.exe
        if-no-files-found: error

    - name: Upload Linux artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: Apple_Music_History_Converter_Linux.*
        if-no-files-found: error

  # Release Creation
  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      # Create new release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          draft: false
          prerelease: false
          body: |
            **Apple Music History Converter ${{ github.ref_name }}**

            Built with Briefcase for native app experiences across platforms.

            ### Downloads and Installation

            **macOS (Apple Silicon/Intel)** - Fully Signed & Notarized ✅
            - Download `Apple_Music_History_Converter_macOS.dmg`
            - Open the DMG file
            - Drag "Apple Music History Converter" to your Applications folder
            - Launch from Applications - no security warnings!

            **Windows (x64)** - Unsigned Build ⚠️
            - Download `Apple_Music_History_Converter_Windows.msi` or `.exe`
            - Run the installer
            - **When Windows SmartScreen appears:**
              1. Click "More info"
              2. Click "Run anyway"
              3. Click "Yes" on the User Account Control prompt
            - This is normal for apps distributed outside the Microsoft Store
            - The app is safe - SmartScreen appears because we don't have an expensive ($250-700/year) code signing certificate

            **Linux (x64)** - Multiple Formats Available

            *Option 1: AppImage (Recommended - Works on all distros)*
            - Download `Apple_Music_History_Converter_Linux.AppImage`
            - Make it executable: `chmod +x Apple_Music_History_Converter_Linux.AppImage`
            - Run: `./Apple_Music_History_Converter_Linux.AppImage`
            - No installation needed, runs on Ubuntu, Fedora, Arch, Debian, Mint, etc.

            *Option 2: System Package (Smaller size, better integration)*
            - Download the appropriate package for your distribution:
              - `.deb` for Debian/Ubuntu/Mint
              - `.rpm` for Fedora/Red Hat/CentOS
              - `.tar.gz` for other distributions
            - Install using your system's package manager or extract the tar.gz
            
            ### Usage Instructions
            1. Export your Apple Music data:
               - From Apple Music app: File > Library > Export Library (XML format)
               - Or use Apple's Privacy & Data tool to export CSV files
            
            2. Run the converter:
               - Launch the application
               - Select your CSV or XML file
               - Choose conversion options
               - Select output location
               - Click "Convert" to process your library
            
            ### Features
            - Support for multiple Apple Music export formats
            - Dual search providers: MusicBrainz (offline) and iTunes API (online)
            - Fast, accurate track matching with fallback capabilities
            - Modern, user-friendly interface with progress tracking
            - Cross-platform compatibility
            - Automatic encoding detection for international character sets
            - Pause/resume functionality for large files
            
            ### Requirements
            - macOS 11.0 (Big Sur) or later
            - Windows 10 or later
            - Linux with GTK 3.0 or later
            
            ### Technical Notes
            - **macOS**: Fully code-signed with Developer ID and notarized by Apple (no warnings)
            - **Windows**: Unsigned - you'll see SmartScreen warnings but the app is safe
            - **Linux**: AppImage is portable and runs on any modern distribution
            - All platforms include native app bundles built with Briefcase/Toga

            ### Troubleshooting

            **macOS**: If the app won't open, try:
            - Right-click the app and select "Open" (first time only)
            - Check System Settings > Privacy & Security for any blocks

            **Windows**: If SmartScreen blocks the app:
            - Click "More info" then "Run anyway"
            - This is expected for unsigned apps and doesn't mean the app is unsafe

            **Linux**: If AppImage won't run:
            - Ensure it's executable: `chmod +x *.AppImage`
            - Install FUSE if needed: `sudo apt install fuse` (Ubuntu/Debian)

            For any issues, please create a ticket in the Issues section.